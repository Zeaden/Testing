'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsChuyenBay
    Inherits DataSet
    
    Private tableChuyenBay As ChuyenBayDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("ChuyenBay")) Is Nothing) Then
                Me.Tables.Add(New ChuyenBayDataTable(ds.Tables("ChuyenBay")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ChuyenBay As ChuyenBayDataTable
        Get
            Return Me.tableChuyenBay
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsChuyenBay = CType(MyBase.Clone,dsChuyenBay)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("ChuyenBay")) Is Nothing) Then
            Me.Tables.Add(New ChuyenBayDataTable(ds.Tables("ChuyenBay")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableChuyenBay = CType(Me.Tables("ChuyenBay"),ChuyenBayDataTable)
        If (Not (Me.tableChuyenBay) Is Nothing) Then
            Me.tableChuyenBay.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsChuyenBay"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/dsChuyenBay.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableChuyenBay = New ChuyenBayDataTable
        Me.Tables.Add(Me.tableChuyenBay)
    End Sub
    
    Private Function ShouldSerializeChuyenBay() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub ChuyenBayRowChangeEventHandler(ByVal sender As Object, ByVal e As ChuyenBayRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ChuyenBayDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMaChuyenBay As DataColumn
        
        Private columnMaTuyenBay As DataColumn
        
        Private columnNgayGio As DataColumn
        
        Private columnThoiGianBay As DataColumn
        
        Private columnSoLuongGheHang1 As DataColumn
        
        Private columnSoLuongGheHang2 As DataColumn
        
        Friend Sub New()
            MyBase.New("ChuyenBay")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property MaChuyenBayColumn As DataColumn
            Get
                Return Me.columnMaChuyenBay
            End Get
        End Property
        
        Friend ReadOnly Property MaTuyenBayColumn As DataColumn
            Get
                Return Me.columnMaTuyenBay
            End Get
        End Property
        
        Friend ReadOnly Property NgayGioColumn As DataColumn
            Get
                Return Me.columnNgayGio
            End Get
        End Property
        
        Friend ReadOnly Property ThoiGianBayColumn As DataColumn
            Get
                Return Me.columnThoiGianBay
            End Get
        End Property
        
        Friend ReadOnly Property SoLuongGheHang1Column As DataColumn
            Get
                Return Me.columnSoLuongGheHang1
            End Get
        End Property
        
        Friend ReadOnly Property SoLuongGheHang2Column As DataColumn
            Get
                Return Me.columnSoLuongGheHang2
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ChuyenBayRow
            Get
                Return CType(Me.Rows(index),ChuyenBayRow)
            End Get
        End Property
        
        Public Event ChuyenBayRowChanged As ChuyenBayRowChangeEventHandler
        
        Public Event ChuyenBayRowChanging As ChuyenBayRowChangeEventHandler
        
        Public Event ChuyenBayRowDeleted As ChuyenBayRowChangeEventHandler
        
        Public Event ChuyenBayRowDeleting As ChuyenBayRowChangeEventHandler
        
        Public Overloads Sub AddChuyenBayRow(ByVal row As ChuyenBayRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddChuyenBayRow(ByVal MaChuyenBay As String, ByVal MaTuyenBay As String, ByVal NgayGio As Date, ByVal ThoiGianBay As Short, ByVal SoLuongGheHang1 As Short, ByVal SoLuongGheHang2 As Short) As ChuyenBayRow
            Dim rowChuyenBayRow As ChuyenBayRow = CType(Me.NewRow,ChuyenBayRow)
            rowChuyenBayRow.ItemArray = New Object() {MaChuyenBay, MaTuyenBay, NgayGio, ThoiGianBay, SoLuongGheHang1, SoLuongGheHang2}
            Me.Rows.Add(rowChuyenBayRow)
            Return rowChuyenBayRow
        End Function
        
        Public Function FindByMaChuyenBay(ByVal MaChuyenBay As String) As ChuyenBayRow
            Return CType(Me.Rows.Find(New Object() {MaChuyenBay}),ChuyenBayRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ChuyenBayDataTable = CType(MyBase.Clone,ChuyenBayDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ChuyenBayDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMaChuyenBay = Me.Columns("MaChuyenBay")
            Me.columnMaTuyenBay = Me.Columns("MaTuyenBay")
            Me.columnNgayGio = Me.Columns("NgayGio")
            Me.columnThoiGianBay = Me.Columns("ThoiGianBay")
            Me.columnSoLuongGheHang1 = Me.Columns("SoLuongGheHang1")
            Me.columnSoLuongGheHang2 = Me.Columns("SoLuongGheHang2")
        End Sub
        
        Private Sub InitClass()
            Me.columnMaChuyenBay = New DataColumn("MaChuyenBay", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMaChuyenBay)
            Me.columnMaTuyenBay = New DataColumn("MaTuyenBay", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMaTuyenBay)
            Me.columnNgayGio = New DataColumn("NgayGio", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNgayGio)
            Me.columnThoiGianBay = New DataColumn("ThoiGianBay", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnThoiGianBay)
            Me.columnSoLuongGheHang1 = New DataColumn("SoLuongGheHang1", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSoLuongGheHang1)
            Me.columnSoLuongGheHang2 = New DataColumn("SoLuongGheHang2", GetType(System.Int16), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSoLuongGheHang2)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnMaChuyenBay}, true))
            Me.columnMaChuyenBay.AllowDBNull = false
            Me.columnMaChuyenBay.Unique = true
        End Sub
        
        Public Function NewChuyenBayRow() As ChuyenBayRow
            Return CType(Me.NewRow,ChuyenBayRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ChuyenBayRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ChuyenBayRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ChuyenBayRowChangedEvent) Is Nothing) Then
                RaiseEvent ChuyenBayRowChanged(Me, New ChuyenBayRowChangeEvent(CType(e.Row,ChuyenBayRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ChuyenBayRowChangingEvent) Is Nothing) Then
                RaiseEvent ChuyenBayRowChanging(Me, New ChuyenBayRowChangeEvent(CType(e.Row,ChuyenBayRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ChuyenBayRowDeletedEvent) Is Nothing) Then
                RaiseEvent ChuyenBayRowDeleted(Me, New ChuyenBayRowChangeEvent(CType(e.Row,ChuyenBayRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ChuyenBayRowDeletingEvent) Is Nothing) Then
                RaiseEvent ChuyenBayRowDeleting(Me, New ChuyenBayRowChangeEvent(CType(e.Row,ChuyenBayRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveChuyenBayRow(ByVal row As ChuyenBayRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ChuyenBayRow
        Inherits DataRow
        
        Private tableChuyenBay As ChuyenBayDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableChuyenBay = CType(Me.Table,ChuyenBayDataTable)
        End Sub
        
        Public Property MaChuyenBay As String
            Get
                Return CType(Me(Me.tableChuyenBay.MaChuyenBayColumn),String)
            End Get
            Set
                Me(Me.tableChuyenBay.MaChuyenBayColumn) = value
            End Set
        End Property
        
        Public Property MaTuyenBay As String
            Get
                Try 
                    Return CType(Me(Me.tableChuyenBay.MaTuyenBayColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChuyenBay.MaTuyenBayColumn) = value
            End Set
        End Property
        
        Public Property NgayGio As Date
            Get
                Try 
                    Return CType(Me(Me.tableChuyenBay.NgayGioColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChuyenBay.NgayGioColumn) = value
            End Set
        End Property
        
        Public Property ThoiGianBay As Short
            Get
                Try 
                    Return CType(Me(Me.tableChuyenBay.ThoiGianBayColumn),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChuyenBay.ThoiGianBayColumn) = value
            End Set
        End Property
        
        Public Property SoLuongGheHang1 As Short
            Get
                Try 
                    Return CType(Me(Me.tableChuyenBay.SoLuongGheHang1Column),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChuyenBay.SoLuongGheHang1Column) = value
            End Set
        End Property
        
        Public Property SoLuongGheHang2 As Short
            Get
                Try 
                    Return CType(Me(Me.tableChuyenBay.SoLuongGheHang2Column),Short)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableChuyenBay.SoLuongGheHang2Column) = value
            End Set
        End Property
        
        Public Function IsMaTuyenBayNull() As Boolean
            Return Me.IsNull(Me.tableChuyenBay.MaTuyenBayColumn)
        End Function
        
        Public Sub SetMaTuyenBayNull()
            Me(Me.tableChuyenBay.MaTuyenBayColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNgayGioNull() As Boolean
            Return Me.IsNull(Me.tableChuyenBay.NgayGioColumn)
        End Function
        
        Public Sub SetNgayGioNull()
            Me(Me.tableChuyenBay.NgayGioColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsThoiGianBayNull() As Boolean
            Return Me.IsNull(Me.tableChuyenBay.ThoiGianBayColumn)
        End Function
        
        Public Sub SetThoiGianBayNull()
            Me(Me.tableChuyenBay.ThoiGianBayColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSoLuongGheHang1Null() As Boolean
            Return Me.IsNull(Me.tableChuyenBay.SoLuongGheHang1Column)
        End Function
        
        Public Sub SetSoLuongGheHang1Null()
            Me(Me.tableChuyenBay.SoLuongGheHang1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsSoLuongGheHang2Null() As Boolean
            Return Me.IsNull(Me.tableChuyenBay.SoLuongGheHang2Column)
        End Function
        
        Public Sub SetSoLuongGheHang2Null()
            Me(Me.tableChuyenBay.SoLuongGheHang2Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ChuyenBayRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ChuyenBayRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ChuyenBayRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ChuyenBayRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
